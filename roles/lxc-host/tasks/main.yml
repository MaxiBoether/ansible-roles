- name: un/install packages
  package:
    name: "{{ item.key }}"
    state: "{{ item.value }}"
  with_dict:
    lxc:                    present
    bridge-utils:           present

    # provides ``new(u|g)idmap`` commands
    uidmap:                 present

    # allows non-root users to manage cgroups
    libpam-cgfs:            present

    # can move (all) processes (of a user) into a cgroup
    # (replaces ``cgmanager``, I guess)
    libpam-cgroup:          present

    # provides ``setfacl`` command
    acl:                    present


- name: set sysctl configuration
  register: sysctl_config_result
  blockinfile:
    dest: /etc/sysctl.d/80-lxc-host-unprivileged.conf
    create: yes
    block: |
      kernel.unprivileged_userns_clone=1
      net.ipv6.conf.all.forwarding=1

- name: reload sysctl
  command: sysctl --system
  when: sysctl_config_result.changed



- name: configure ``libpam-cgfs`` to allow ``cpu`` and ``cpuset``
        controllers
  lineinfile:
    dest: /etc/pam.d/common-session
    regexp: '^session\soptional\spam_cgfs\.so\s.*'
    line: 'session	optional	pam_cgfs.so -c freezer,memory,name=systemd,cpu,cpuset'



- name: create user which will run unprivileged containers
  user:
    name: "{{ lxc_user }}"
    comment: runs unprivileged containers

- name: "get home directory of user '{{ lxc_user }}'"
  register: lxc_user_home_result
  shell: "readlink -fn ~{{ lxc_user }}"
  changed_when: false

- name: "set home directory of user '{{ lxc_user }}' as fact"
  set_fact:
    lxc_user_home: "{{ lxc_user_home_result.stdout }}"

- name: add sub(g|u)ids
  include_tasks: _configure-subids.yml
  with_items:
    - subuid
    - subgid

- name: create user's lxc configuration directory
  file:
    path: "{{ lxc_user_home }}/.config/lxc/"
    state: directory
  become: yes
  become_user: "{{ lxc_user }}"

# We do not use ``lineinfile`` the configuration parameters in a
# dictionary for the LXC configurations, because some keys are allowed
# multiple times (e.g., ``lxc.mount.entry``) and thus, detecting the
# right key to replace would be complex and error-prone.

- name: set lxc configuration
  blockinfile:
    dest: "{{ lxc_user_home }}/.config/lxc/lxc.conf"
    create: yes
    marker: "# {mark} ANSIBLE MANAGED main lxc configuration"
    insertbefore: BOF
    block: |
      lxc.lxcpath = {{ lxc_user_home }}
  become: yes
  become_user: "{{ lxc_user }}"

- name: set common lxc container configuration
  blockinfile:
    dest: "{{ lxc_user_home }}/.config/lxc/common.conf"
    create: yes
    marker: "# {mark} ANSIBLE MANAGED main common configuration"
    insertbefore: BOF
    block: |
      # common configuration for all containers
      #
      # include with::
      #
      #   lxc.include = {{ lxc_user_home }}/.config/lxc/common.conf
      #
      # at top of individual configuration files
      lxc.include = /usr/share/lxc/config/common.conf
      lxc.include = /usr/share/lxc/config/userns.conf
      lxc.include = /etc/lxc/default.conf

      # unprivileged users (i.e., ``lxc_user`` in our case) are not
      # allowed to create apparmor namespaces, we hence cannot use
      # apparmor
      lxc.apparmor.profile = unconfined

      lxc.arch = x86_64
      lxc.start.auto = 1
      lxc.start.delay = 20

      # systemd does this by itself, no?
      #lxc.mount.entry = tmpfs run tmpfs defaults,size=1%
      #lxc.mount.entry = tmpfs tmp tmpfs defaults,size=1%

      lxc.net.0.type = veth
      lxc.net.0.name = eth0
      lxc.net.0.flags = up
      lxc.net.0.ipv6.gateway = auto

      # per default, containers get this many CPU shares
      #   i.e., if container should have twice the priority compared
      #   to the others, give it twice as many shares
      lxc.cgroup.cpu.shares = 1024

  become: yes
  become_user: "{{ lxc_user }}"

- name: set default lxc container configuration
  blockinfile:
    dest: "{{ lxc_user_home }}/.config/lxc/default.conf"
    create: yes
    marker: "# {mark} ANSIBLE MANAGED BLOCK: main default configuration"
    insertbefore: BOF
    block: |
      # Be aware that we provide this file only for ``lxc-create`` to
      # have the configuration it needs to do its job. After container
      # creation, this file will be overwritten (by Ansible).

      # Background:
      # We don't use this file to provide all the default configuration
      # options since ``lxc-start`` (or the template ``lxc-download``,
      # I am not sure) is quite unpredictable in a way that it
      # re-arranges the options specified in ``default.conf``.
      # Hence, we drop the configuration file assembled by ``lxc-start``
      # and set all options manually (i.e., using Ansible).

      lxc.include = {{ lxc_user_home }}/.config/lxc/common.conf

  become: yes
  become_user: "{{ lxc_user }}"

- name: configure containers
  include_tasks: _configure-container.yml
  vars:
    container_name: "{{ lxc_container_item.key }}"
    container_conf: "{{
      lxc_container_defaults
      | combine(lxc_container_defaults_extra | default({}))
      | combine(lxc_container_item.value)
    }}"

    # some more variables for convenience:
    container_bridge: "lxc-br-{{ container_name }}"

  with_dict: "{{ lxc_containers }}"
  loop_control:
    loop_var: lxc_container_item
    label: "{{ lxc_container_item.key }}"

- name: unconfigure containers
  include_tasks: _unconfigure-container.yml
  vars:

    # variables for convenience:
    container_bridge: "lxc-br-{{ container_name }}"

  with_items: "{{ lxc_containers_to_delete_permanently }}"
  loop_control:
    loop_var: container_name
