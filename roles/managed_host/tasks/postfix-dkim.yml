# todo: set fact: extend postfix_dkim_keys with variables frequently
# needed (path to key file etc.)

- name: "{{ 'install' if postfix_dkim_keys else 'uninstall' }}
         packages required for DKIM"
  apt:
    name: "{{ item }}"
    install_recommends: yes
    state: "{{ 'present' if postfix_dkim_keys else 'absent' }}"
  with_items:
    - opendkim
    - opendkim-tools

- name: enable opendkim service
  service: name=opendkim enabled=yes
  when: postfix_dkim_keys

- name: add user postfix to group opendkim
  user: name=postfix groups=opendkim append=yes
  when: postfix_dkim_keys

- name: make opendkim directory in postfix chroot
  file:
    path: /var/spool/postfix/opendkim
    state: "{{ 'directory' if postfix_dkim_keys else 'absent' }}"
    mode: 0750
    owner: opendkim
    group: opendkim

- name: set options for opendkim
  lineinfile:
    dest: /etc/opendkim.conf
    regexp: '^(#\s?)?{{ item.key }}\s+'
    line: "{{ item.key }} {{ item.value }}"
    state: present
  with_dict:
    UMask: "007"
    UserID: opendkim:opendkim
    Canonicalization: relaxed
    Mode: sv
    SubDomains: "yes"
    AutoRestart: "yes"
    AutoRestartRate: 10/1M
    Background: "yes"
    DNSTimeout: 10
    SignHeaders: MIME-Version,In-Reply-To,References,From,Date,Message-ID,Subject,To,Cc
    KeyTable: "{{ postfix_dkim_keytable }}"
    SigningTable: "refile:{{ postfix_dkim_signingtable }}"
  when: postfix_dkim_keys
  notify: restart opendkim

- name: write signing table
  lineinfile:
    dest: "{{ postfix_dkim_signingtable }}"
    regexp: '\s+{{ item.key | regex_escape }}\s+'
    line: "*@{{ item.value.match }} {{ item.key }}"
    state: present
    create: yes
    owner: opendkim
    group: opendkim
  with_dict: "{{ postfix_dkim_keys }}"
  loop_control:
    label: "{{ item.key }}"

- name: write key table
  lineinfile:
    dest: "{{ postfix_dkim_keytable }}"
    regexp: '.*{{ item.key | regex_escape }}.*'
    line: "{{ item.key }} {{ item.key }}:{{ item.value.selector }}:/etc/dkimkeys/{{ item.key }}_{{ item.value.selector }}.private"
    state: present
    create: yes
    owner: opendkim
    group: opendkim
  with_dict: "{{ postfix_dkim_keys }}"
  loop_control:
    label: "{{ item.key }}"

- name: write key files
  blockinfile:
    dest: "/etc/dkimkeys/{{ item.key }}_{{ item.value.selector }}.private"
    block: "{{ item.value.privatekey }}"
    marker: "---------- {mark} ANSIBLE MANAGED"
    create: yes
    insertafter: BOF
    owner: opendkim
    group: root
  with_dict: "{{ postfix_dkim_keys }}"
  loop_control:
    label: "{{ item.key }}"

- name: ensure permissions of key files
  file:
    dest: "/etc/dkimkeys/{{ item.key }}_{{ item.value.selector }}.private"
    state: file
    owner: opendkim
    group: root
    mode: 0400
  with_dict: "{{ postfix_dkim_keys }}"
  loop_control:
    label: "{{ item.key }}"

- name: set daemon defaults for opendkim
  register: set_opendkim_daemon_options
  lineinfile:
    dest: /etc/default/opendkim
    regexp: '^(#\s?)?{{ item.key }}\s*'
    line: "{{ item.key }}='{{ item.value }}'"
    state: present
    create: yes
  with_dict:
    SOCKET: "/var/spool/postfix/opendkim/opendkim.sock"
  notify: restart opendkim
  when: postfix_dkim_keys

- name: regenerate opendkim service file
  command: /lib/opendkim/opendkim.service.generate
  when: "postfix_dkim_keys and
         set_opendkim_daemon_options | changed and
         ansible_distribution == 'Debian'"
  notify: reload systemd daemon

- name: set options for postfix and opendkim
  lineinfile: dest=/etc/postfix/main.cf
              regexp="^{{ item.key }}\s*"
              line="{{ item.key }} = {{ item.value }}"
              state=present create=yes owner=root mode=0644
  with_dict:
    milter_default_action: accept
    milter_protocol: 2
    smtpd_milters: "{{ (['unix:opendkim/opendkim.sock'] +
                         postfix_extra_smtpd_milters) | join(' ')}}"
    non_smtpd_milters: "{{ (['unix:opendkim/opendkim.sock'] +
                             postfix_extra_non_smtpd_milters) | join(' ') }}"
  when: postfix_dkim_keys
  notify: restart postfix

- name: unset options for postfix and opendkim
  lineinfile: dest=/etc/postfix/main.cf
              regexp="^{{ item.key }}\s*"
              line="{{ item.key }} = {{ item.value }}"
              state=present create=yes owner=root mode=0644
  with_dict:
    smtpd_milters: "{{ postfix_extra_smtpd_milters | join(' ') }}"
    non_smtpd_milters: "{{ postfix_extra_non_smtpd_milters | join(' ') }}"
  when: not postfix_dkim_keys
  notify: restart postfix
