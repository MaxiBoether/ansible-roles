- name: uninstall system packages for rootkit detection
        (malicious software will probably detect those anyway)
  package: name={{ item }} state=absent
  with_items:
    - rkhunter
    - unhide
    - chkrootkit

- name: ensure we start a new report
  file: path="{{ tmp_hardening_report_file }}" state=absent



########################################################################
# debsums
#

- name: search for changed files using 'debsums'
  register: debsums_result
  shell: debsums --silent >> "{{ tmp_hardening_report_file }}" 2>&1
  changed_when: debsums_result.rc != 0
  failed_when: false



########################################################################
# rkhuner
#

- name: download packed rkhunter sources ({{ rkhunter_version }})
  register: rkhunter_download
  get_url:
    dest=/tmp/rkhunter.tar.gz
    url=https://sourceforge.net/projects/rkhunter/files/rkhunter/{{ rkhunter_version }}/rkhunter-{{ rkhunter_version }}.tar.gz/download
    timeout=60
  retries: 5
  until: rkhunter_download is success
  delay: 3


- name: unpack rkhunter
  unarchive: copy=no
             src=/tmp/rkhunter.tar.gz
             dest=/tmp/

- name: remove packed rkhunter sources
  file: path=/tmp/rkhunter.tar.gz state=absent

- name: create rkhunter's temporary installation directory
  file: path=/tmp/rkhunter state=directory

- name: install rkhunter (temporarily)
  command: ./installer.sh --layout custom /tmp/rkhunter --install
           chdir=/tmp/rkhunter-{{ rkhunter_version }}

- name: remove unpacked rkhunter sources
  file: path=/tmp/rkhunter-{{ rkhunter_version }} state=absent

# disable "properties" because those are checked by debsums
- name: run rkhunter
  register: rkhunter_result
  shell: "
    ./rkhunter
      --check
      --nocolors
      --skip-keypress
      --report-warnings-only
      --disable properties
    |
    sed 's/^/rkhunter: /'
    >>
    '{{ tmp_hardening_report_file }}'
  "
  args:
    chdir: /tmp/rkhunter/bin
  changed_when: rkhunter_result.rc != 0
  failed_when: false

- name: remove temporary rkhunter installation
  file: path=/tmp/rkhunter state=absent

- name: remove rkhunter cron entries
  shell: find /etc/cron* -name rkhunter -delete



########################################################################
# Lynis
#

- name: checkout Lynis
  git: repo=https://github.com/CISOfy/lynis.git
       dest=/tmp/lynis
       force=yes

# we cannot use ini_file, since Lynis does not use standard INI files
- name: create sections in Lynis configuration
  lineinfile: dest=/tmp/lynis/custom.prf
              line="[{{ item.section }}]"
              create=yes
  with_items: "{{ lynis_global_options |
                  union( lynis_extra_options | default([]) ) }}"

# we cannot use ini_file, since Lynis does not use standard INI files
- name: put configuration key-value pairs in Lynis configuration
  lineinfile: dest=/tmp/lynis/custom.prf
              line="{{ item.option }}"
              insertafter="\[{{ item.section }}\]"
  with_items: "{{ lynis_global_options |
                  union( lynis_extra_options | default([]) ) }}"

- name: check if swap partition is configured or active
  shell: grep -q swap /etc/fstab || mount | grep -q swap
  register: swap_check
  changed_when: false
  ignore_errors: yes

- name: disable check for swap partition if none was found
  lineinfile: dest=/tmp/lynis/custom.prf
              line="skip-test=FILE-6336"
              insertafter="\[security\]"
  when: swap_check.rc != 0

- name: disable kernel-related check when OS-level virtualized
  lineinfile: dest=/tmp/lynis/custom.prf
              line="skip-test={{ item }}"
              insertafter="\[security\]"
  when: ansible_virtualization_type in ["lxc"]
  with_items:
    # check for kernel updates:
    - KRNL-5788
    # check for sysctl values:
    - KRNL-6000
    # check for NTP client (clock should be controlled by hypervisor):
    - TIME-3104

- name: run Lynis
  shell: 'cd /tmp/lynis &&
          ./lynis audit system --cronjob
          |
          cat -v
          |
          sed -r "s/\^\[\[[0-9;]+m//g"
          >>
          "{{ tmp_hardening_report_file }}"'

- name: remove lynis
  file: path=/tmp/lynis state=absent



########################################################################
# deborphan
#

- name: write new headline to report file
  shell: echo "{{ item }}" >> "{{ tmp_hardening_report_file }}"
  with_items:
    - ""
    - "packages which are not a dependency of any other package"
    - "========================================================"
    - "(check for unneeded packages that you can remove â€“ less packages,"
    - " less attack surface)"

- name: create list of packages, which are not a dependency of any other
        package
  shell: deborphan -a >> "{{ tmp_hardening_report_file }}"



########################################################################
# email the report
#

- name: email hardening report to root
  shell: "cat '{{ tmp_hardening_report_file }}'
          |
          mail -s '{{ ansible_hostname }} hardening report' root"

- name: remove hardening report
  file: path="{{ tmp_hardening_report_file }}" state=absent
