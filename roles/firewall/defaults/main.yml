# This *has* to be set explicitly when using this role so we can be a
# bit more confident that we don't lock ourselves out.
firewall_ssh_port: "needs to be set explicitly"

# Per built-in chain, we add a custom chain, which makes scripting
# easier. It is recommended that those custom chains are used.
iptables_custom_chains:

  ansible-input:
    table: filter
    add_to_chain: INPUT
  ansible-forward:
    table: filter
    add_to_chain: FORWARD
  ansible-output:
    table: filter
    add_to_chain: OUTPUT
  #ansible-secmark:
  #  table: filter
  #  add_to_chain: SECMARK
  #ansible-connsecmark:
  #  table: filter
  #  add_to_chain: CONNSECMARK

  ansible-nat-prerouting:
    table: nat
    add_to_chain: PREROUTING
  #ansible-nat-input:
  #  table: nat
  #  add_to_chain: INPUT
  #ansible-nat-output:
  #  table: nat
  #  add_to_chain: OUTPUT
  ansible-nat-postrouting:
    table: nat
    add_to_chain: POSTROUTING

# Use this variable to modify/extend ``iptables_custom_rules``.
# If ``add_to_chain`` evaluates to false, the chain will be removed.
iptables_custom_chains_extra: {}

# This role's default rules: a map, mapping from "names" to "rules".
# A "name" can be anything unique. The name will be automatically set
# as ``comment`` argument to the ``iptables`` module.
# A "rule" is a map of arguments to Ansible's module ``iptables``:
#   https://docs.ansible.com/ansible/latest/modules/iptables_module.html
iptables_rules:

  "block XMAS packets":
    chain: ansible-input
    protocol: tcp
    tcp_flags:
      flags: ALL
      flags_set:
        - FIN
        - PSH
        - URG
    jump: DROP

  "block NULL packets":
    chain: ansible-input
    protocol: tcp
    tcp_flags:
      flags: ALL
      flags_set: NONE
    jump: DROP

  "allow loopback connections":
    chain: ansible-input
    in_interface: lo
    jump: ACCEPT

  "allow established and related connections":
    chain: ansible-input
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT

  ####################################################################
  # ICMP (http://shouldiblockicmp.com/)
  #

  # considered harmful when not used with conntrack/hashlimit
  # (https://serverfault.com/a/716092)
  #"rate-limit all ICMP traffic":
  #  chain: ansible-input
  #  protocol: icmp
  #
  #  limit_burst: 10
  #  limit: 100/second
  #
  #  jump: ACCEPT

  "allow ICMP echo replies":
    chain: ansible-input
    protocol: icmp
    icmp_type: 0/0
    jump: ACCEPT

  "allow ICMP Fragmentation Required replies":
    chain: ansible-input
    protocol: icmp
    icmp_type: 3/4
    jump: ACCEPT

  "allow ICMP echo requests":
    chain: ansible-input
    protocol: icmp
    icmp_type: 8/0
    jump: ACCEPT

  "allow ICMP Time Exceeded replies":
    chain: ansible-input
    protocol: icmp
    icmp_type: 11/0
    jump: ACCEPT

  #
  ####################################################################

  "allow SSH connections":
    chain: ansible-input
    protocol: tcp
    destination_port: "{{ firewall_ssh_port }}"
    ctstate: NEW
    syn: match
    jump: ACCEPT

  # keep this last
  # considered harmful when not used with conntrack/hashlimit
  # (https://serverfault.com/a/716092)
  #"rate-limit SYN packets":
  #  chain: ansible-input
  #  protocol: tcp
  #  syn: match
  #  limit_burst: 10
  #  limit: 10/second
  #  jump: ACCEPT

  "input policy drop":
    chain: INPUT
    policy: DROP

# Use this variable to extend ``iptables_rules``.
#   iptables_rules_extra:
#     "the rule to disable": null
iptables_rules_extra: {}

  # If you want to disable a rule from ``iptables_rules``,
  # set it to ``null``, e.g.:
  #"input policy": null

fail2ban_config_file: /etc/fail2ban/fail2ban.d/50-via-ansible.local

# Statically sets Fail2ban configuration.
# You can use ``fail2ban_extra_config`` to override values.
fail2ban_config:
  Definition:
    logtarget: SYSLOG



fail2ban_jails_config_file: /etc/fail2ban/jail.d/50-via-ansible.local

# Statically sets Fail2ban jail configuration.
# You can use ``fail2ban_jails_extra_config`` to override values.
#
# For the "mode" settings, see the corresponding file in
# https://github.com/fail2ban/fail2ban/blob/master/config/filter.d/
fail2ban_jails_config:
  DEFAULT:
    bantime: 1800

    # window for ``maxretry``
    findtime: 1810
    # retries before banning a host:
    maxretry: 3

    destemail: root
    sender: root

  sshd:
    mode: aggressive

  postfix:
    mode: aggressive

# Maps from jail names to a shell commands. If command exits with
# code 0, the listed jails will be enabled, or disabled otherwise.
# You can use ``fail2ban_jails_extra_auto_enable`` to override values.
fail2ban_jails_auto_enable:
  apache-auth: apache2 -v
  apache-badbots: apache2 -v
  apache-botsearch: apache2 -v
  apache-modsecurity: apache2 -v
  apache-nohome: apache2 -v
  apache-noscript: apache2 -v
  apache-overflows: apache2 -v
  apache-shellshock: apache2 -v
  dovecot: dovecot --version'
  mysqld-auth: mysqld --version
  nginx-botsearch: nginx -v
  nginx-http-auth: nginx -v

  # deactivate separate RBL/SASL jails, since their filters are included
  # in the Postfix jail in mode "aggressive" anyway
  postfix-rbl: false
  postfix-sasl: false

  sshd: pgrep sshd
  # ``sshd-ddos`` included in mode "aggressive" for jail ``sshd``:
  sshd-ddos: false
