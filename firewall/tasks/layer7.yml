# OSI layer 7 firewall is currently Fail2ban.
# This file takes care of Fail2ban's configuration.


# we use the "apt" module, so we can ``install_recommends``
- name: install Fail2ban
  apt:
    name: fail2ban
    state: present
    install_recommends: yes

- name: processing static Fail2ban configuration
  include_tasks: _fail2ban-write-config-section.yml
  with_dict: "{{ fail2ban_config |
                 combine(fail2ban_extra_config | default({})) }}"
  loop_control:
    loop_var: section
  vars:
    config_file: "{{ fail2ban_config_file }}"

- name: add extra fail2ban configuration files
  blockinfile:
    dest: "/etc/fail2ban/{{ item.path }}"
    create: yes
    block: "{{ lookup('file', item.src) }}"
  when: item.state == 'file'
  with_filetree: etc/fail2ban/
  notify: reload fail2ban

- name: enable and start fail2ban
  service:
    name: fail2ban
    enabled: true
  notify: reload fail2ban



- name: processing Fail2ban jails to automatically enable/disable
  include_tasks: _fail2ban-auto-enable-jail.yml
  with_dict: "{{ fail2ban_jails_auto_enable |
                 combine(fail2ban_jails_auto_enable_extra | default({})) }}"
  loop_control:
    loop_var: fail2ban_jail_auto_enable

- name: processing static Fail2ban jail configuration
  include_tasks: _fail2ban-write-config-section.yml
  with_dict: "{{ fail2ban_jails_config |
                 combine(fail2ban_jails_config_extra | default({})) }}"
  loop_control:
    loop_var: section
  vars:
    config_file: "{{ fail2ban_jails_config_file }}"



- name: get SSH port
  register: get_ssh_port_result
  shell: sshd -T -C user=root | grep -i '^port ' | cut -d" " -f2
  changed_when: false

- name: set SSH port for fail2ban
  include_tasks: _fail2ban-write-config-section.yml
  with_dict:
    sshd:
      port: "{{ get_ssh_port_result.stdout_lines.0 }}"
  loop_control:
    loop_var: section
  vars:
    config_file: "{{ fail2ban_jails_config_file }}"
  when: get_ssh_port_result is success
